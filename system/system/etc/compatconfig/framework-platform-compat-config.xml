<?xml version='1.0' encoding='utf-8'?>
<config><compat-change description="For accessibility services targeting APIs greater than {@link Build.VERSION_CODES#Q API 29}, {@link #FLAG_REQUEST_ACCESSIBILITY_BUTTON} must be specified in the accessibility service metadata file. Otherwise, it will be ignored." enableAfterTargetSdk="29" id="136293963" name="REQUEST_ACCESSIBILITY_BUTTON_CHANGE" /><compat-change description="Intent {@link Intent#ACTION_CLOSE_SYSTEM_DIALOGS} is too powerful to be unrestricted. We restrict its usage for a few legitimate use-cases only, regardless of targetSdk. For the other use-cases we drop the intent with a log message. Note that this is the lighter version of {@link ActivityManager #LOCK_DOWN_CLOSE_SYSTEM_DIALOGS} which is not gated on targetSdk in order to eliminate the abuse vector." id="174664120" name="DROP_CLOSE_SYSTEM_DIALOGS" /><compat-change description="Intent {@link Intent#ACTION_CLOSE_SYSTEM_DIALOGS} is too powerful to be unrestricted. So, apps targeting {@link Build.VERSION_CODES#S} or higher will crash if they try to send such intent and don't have permission {@code android.permission.BROADCAST_CLOSE_SYSTEM_DIALOGS}. Note that this is the more restrict version of {@link ActivityManager #DROP_CLOSE_SYSTEM_DIALOGS} that expects the app to stop sending aforementioned intent once it bumps its targetSdk to {@link Build.VERSION_CODES#S} or higher." enableSinceTargetSdk="31" id="174664365" name="LOCK_DOWN_CLOSE_SYSTEM_DIALOGS" /><compat-change description="After {@link Build.VERSION_CODES#TIRAMISU}, {@link #dump(String, FileDescriptor, PrintWriter, String[])} is not called if {@code dumpsys activity} is called with some special arguments." enableSinceTargetSdk="33" id="149254050" name="DUMP_IGNORES_SPECIAL_ARGS" /><compat-change description="For apps targeting {@link Build.VERSION_CODES#S} or above, any APIs setting exact alarms, e.g. {@link #setExact(int, long, PendingIntent)}, {@link #setAlarmClock(AlarmClockInfo, PendingIntent)} and others will require holding a new permission {@link Manifest.permission#SCHEDULE_EXACT_ALARM}" enableSinceTargetSdk="31" id="171306433" name="REQUIRE_EXACT_ALARM_PERMISSION" /><compat-change description="For apps targeting {@link Build.VERSION_CODES#S} or above, all inexact alarms will require to have a minimum window size, expected to be on the order of a few minutes. Practically, any alarms requiring smaller windows are the same as exact alarms and should use the corresponding APIs provided, like {@link #setExact(int, long, PendingIntent)}, et al. Inexact alarm with shorter windows specified will have their windows elongated by the system." enableSinceTargetSdk="31" id="185199076" name="ENFORCE_MINIMUM_WINDOW_ON_INEXACT_ALARMS" /><compat-change description="For apps targeting {@link Build.VERSION_CODES#TIRAMISU} or above, certain kinds of apps can use {@link Manifest.permission#USE_EXACT_ALARM} to schedule exact alarms." enableSinceTargetSdk="33" id="218533173" name="ENABLE_USE_EXACT_ALARM" /><compat-change description="The permission {@link Manifest.permission#SCHEDULE_EXACT_ALARM} will be denied, unless the user explicitly allows it from Settings." enableSinceTargetSdk="33" id="226439802" name="SCHEDULE_EXACT_ALARM_DENIED_BY_DEFAULT" /><compat-change description="Holding the permission {@link Manifest.permission#SCHEDULE_EXACT_ALARM} will no longer pin the standby-bucket of the app to {@link android.app.usage.UsageStatsManager#STANDBY_BUCKET_WORKING_SET} or better." enableSinceTargetSdk="34" id="262645982" name="SCHEDULE_EXACT_ALARM_DOES_NOT_ELEVATE_BUCKET" /><compat-change description="Exact alarms expecting a {@link OnAlarmListener} callback will be dropped when the calling app goes into cached state." id="265195908" name="EXACT_LISTENER_ALARMS_DROPPED_ON_CACHED" /><compat-change description="This is a subtle behavior change to {@link #startWatchingMode}. Before this change the system called back for the switched op. After the change the system will call back for the actually requested op or all switched ops if no op is specified." enableAfterTargetSdk="29" id="148180766" name="CALL_BACK_ON_CHANGED_LISTENER_WITH_SWITCHED_OP_CHANGE" /><compat-change description="Enforce that all attributionTags send to {@link #noteOp}, {@link #noteProxyOp}, and {@link #startOp} are defined in the manifest of the package that is specified as parameter to the methods. &lt;p&gt;To enable this change both the package calling {@link #noteOp} as well as the package specified as parameter to the method need to have this change enable." enableAfterTargetSdk="30" id="151105954" name="SECURITY_EXCEPTION_ON_INVALID_ATTRIBUTION_TAG_CHANGE" /><compat-change description="Change ID which is always enabled, for testing purposes." enableSinceTargetSdk="1" id="209888056" name="CHANGE_ALWAYS_ENABLED" /><compat-change description="Change ID which is always disabled, for testing purposes." disabled="true" id="210856463" name="CHANGE_ALWAYS_DISABLED" /><compat-change description="The FGS type enforcement: deprecating the {@link android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_NONE}. &lt;p&gt;Starting a FGS with this type (equivalent of no type) from apps with targetSdkVersion {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} or later will result in a warning in the log.&lt;/p&gt;" enableAfterTargetSdk="33" id="255042465" name="FGS_TYPE_NONE_DEPRECATION_CHANGE_ID" overridable="true" /><compat-change description="The FGS type enforcement: disabling the {@link android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_NONE}. &lt;p&gt;Starting a FGS with this type (equivalent of no type) from apps with targetSdkVersion {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} or later will result in an exception.&lt;/p&gt;" enableAfterTargetSdk="33" id="255038118" name="FGS_TYPE_NONE_DISABLED_CHANGE_ID" overridable="true" /><compat-change description="The FGS type enforcement: deprecating the {@link android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_DATA_SYNC}." disabled="true" id="255039210" name="FGS_TYPE_DATA_SYNC_DEPRECATION_CHANGE_ID" overridable="true" /><compat-change description="The FGS type enforcement: disabling the {@link android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_DATA_SYNC}." disabled="true" id="255659651" name="FGS_TYPE_DATA_SYNC_DISABLED_CHANGE_ID" overridable="true" /><compat-change description="The FGS type enforcement: Starting a FGS from apps with targetSdkVersion {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} or later but without the required permissions associated with the FGS type will result in a SecurityException." enableAfterTargetSdk="33" id="254662522" name="FGS_TYPE_PERMISSION_CHANGE_ID" overridable="true" /><compat-change description="It is now required to specify either {@link #FLAG_IMMUTABLE} or {@link #FLAG_MUTABLE} when creating a PendingIntent." enableAfterTargetSdk="30" id="160794467" name="PENDING_INTENT_EXPLICIT_MUTABILITY_REQUIRED" /><compat-change description="" enableSinceTargetSdk="34" id="236704164" name="BLOCK_MUTABLE_IMPLICIT_PENDING_INTENT" overridable="true" /><compat-change description="There will now be a callback to {@link android.content.SharedPreferences.OnSharedPreferenceChangeListener#onSharedPreferenceChanged OnSharedPreferenceChangeListener.onSharedPreferenceChanged} with a {@code null} key on {@link android.content.SharedPreferences.Editor#clear Editor.clear}." enableSinceTargetSdk="30" id="119147584" name="CALLBACK_ON_CLEAR_CHANGE" /><compat-change description="Media controls based on {@link android.app.Notification.MediaStyle} notifications will have actions based on the media session's {@link android.media.session.PlaybackState}, rather than the notification's actions. These actions will be: - Play/Pause (depending on whether the current state is a playing state) - Previous (if declared), or a custom action if the slot is not reserved with   {@code SESSION_EXTRAS_KEY_SLOT_RESERVATION_SKIP_TO_PREV} - Next (if declared), or a custom action if the slot is not reserved with   {@code SESSION_EXTRAS_KEY_SLOT_RESERVATION_SKIP_TO_NEXT} - Custom action - Custom action @see androidx.media.utils.MediaConstants#SESSION_EXTRAS_KEY_SLOT_RESERVATION_SKIP_TO_PREV @see androidx.media.utils.MediaConstants#SESSION_EXTRAS_KEY_SLOT_RESERVATION_SKIP_TO_NEXT" enableSinceTargetSdk="33" id="203800354" name="MEDIA_CONTROL_SESSION_ACTIONS" /><compat-change description="Media controls based on {@link android.app.Notification.MediaStyle} notifications should include a non-empty title, either in the {@link android.media.MediaMetadata} or notification title." id="274775190" loggingOnly="true" name="MEDIA_CONTROL_BLANK_TITLE" /><compat-change description="Trying to read the wallpaper file or bitmap in T will return the default wallpaper bitmap/file instead of throwing a SecurityException." enableSinceTargetSdk="33" id="239784307" name="RETURN_DEFAULT_ON_SECURITY_EXCEPTION" /><compat-change description="In U and later, attempting to read the wallpaper file or bitmap will throw an exception, (except with the READ_WALLPAPER_INTERNAL permission)." enableSinceTargetSdk="34" id="237508058" name="THROW_ON_SECURITY_EXCEPTION" /><compat-change description="If this change is enabled, the {@code BACKUP} permission needed for {@code isBackupServiceActive()} will be enforced on the service end rather than client-side in {@link BackupManager}." enableAfterTargetSdk="30" id="158482162" name="IS_BACKUP_SERVICE_ACTIVE_ENFORCE_PERMISSION_IN_SERVICE" /><compat-change description="When  this change is enabled, include / exclude rules specified via {@code android:fullBackupContent} are ignored during D2D transfers." enableSinceTargetSdk="31" id="180523564" name="IGNORE_FULL_BACKUP_CONTENT_IN_D2D" overridable="true" /><compat-change description="Disallow setting a deadline (via {@link Builder#setOverrideDeadline(long)}) for prefetch jobs ({@link Builder#setPrefetch(boolean)}. Prefetch jobs are meant to run close to the next app launch, so there's no good reason to allow them to have deadlines. We don't drop or cancel any previously scheduled prefetch jobs with a deadline. There's no way for an app to keep a perpetually scheduled prefetch job with a deadline. Prefetch jobs with a deadline will run and apps under this restriction won't be able to schedule new prefetch jobs with a deadline. If a job is rescheduled (by providing {@code true} via {@link JobService#jobFinished(JobParameters, boolean)} or {@link JobService#onStopJob(JobParameters)}'s return value),the deadline is dropped. Periodic jobs require all constraints to be met, so there's no issue with their deadlines." enableSinceTargetSdk="33" id="194532703" name="DISALLOW_DEADLINES_FOR_PREFETCH_JOBS" /><compat-change description="Whether to throw an exception when an app provides an invalid priority value via {@link Builder#setPriority(int)}. Legacy apps may be incorrectly using the API and so the call will silently fail for them if they continue using the API." enableSinceTargetSdk="33" id="140852299" name="THROW_ON_INVALID_PRIORITY_VALUE" /><compat-change description="Require that estimated network bytes are nonnegative." enableAfterTargetSdk="33" id="253665015" name="REJECT_NEGATIVE_NETWORK_ESTIMATES" /><compat-change description="Whether to throw an exception when an app doesn't properly implement all the necessary data transfer APIs." enableAfterTargetSdk="33" id="255371817" name="THROW_ON_INVALID_DATA_TRANSFER_IMPLEMENTATION" /><compat-change description="Correct the lifecycle of activity result after {@link android.os.Build.VERSION_CODES#S} to guarantee that an activity gets activity result just before resume." enableAfterTargetSdk="31" id="78294732" name="CALL_ACTIVITY_RESULT_BEFORE_RESUME" /><compat-change description="After {@link Build.VERSION_CODES#TIRAMISU}, {@link #registerComponentCallbacks(ComponentCallbacks)} will add a {@link ComponentCallbacks} to {@link Activity} or {@link ContextWrapper#getBaseContext()} instead of always adding to {@link #getApplicationContext()}." enableSinceTargetSdk="33" id="193247900" name="OVERRIDABLE_COMPONENT_CALLBACKS" /><compat-change description="Pre R a {@link java.lang.SecurityException} would only be thrown by setEnabled APIs (e .g. {@code #setEnabled(String, boolean, UserHandle)}) for a permission error. Since R this no longer holds true, and {@link java.lang.SecurityException} can be thrown for any number of reasons, none of which are exposed to the caller. &lt;p&gt;To maintain existing API behavior, if a legacy permission failure or actor enforcement failure occurs for an app not yet targeting R, coerce it into an {@link java.lang.IllegalStateException}, which existed in the source prior to R." enableSinceTargetSdk="30" id="147340954" name="THROW_SECURITY_EXCEPTIONS" /><compat-change description="Applications can use OverlayManager to create overlays to overlay on itself resources. The overlay target is itself and the work range is only in caller application. &lt;p&gt;In {@link android.content.Context#getSystemService(String)}, it crashes because of {@link java.lang.NullPointerException} if the parameter is OverlayManager. if the self-targeting is enabled, the caller application can get the OverlayManager instance to use self-targeting functionality." enableSinceTargetSdk="34" id="205919743" name="SELF_TARGETING_OVERLAY" /><compat-change description="This change id forces the packages it is applied to be resizable. It won't change whether the app can be put into multi-windowing mode, but allow the app to resize when the window container resizes, such as display size change." disabled="true" id="174042936" name="FORCE_RESIZE_APP" overridable="true" /><compat-change description="This change id forces the packages it is applied to to be non-resizable." disabled="true" id="181136395" name="FORCE_NON_RESIZE_APP" overridable="true" /><compat-change description="This change id enables compat policy that ignores app requested orientation in response to an app calling {@link android.app.Activity#setRequestedOrientation}. See com.android.server.wm.LetterboxUiController#shouldIgnoreRequestedOrientation for details." disabled="true" id="254631730" name="OVERRIDE_ENABLE_COMPAT_IGNORE_REQUESTED_ORIENTATION" overridable="true" /><compat-change description="This change id enables compat policy that ignores app requested orientation in response to an app calling {@link android.app.Activity#setRequestedOrientation} more than twice in one second if an activity is not letterboxed for fixed orientation. See com.android.server.wm.LetterboxUiController#shouldIgnoreRequestedOrientation for details." disabled="true" id="273509367" name="OVERRIDE_ENABLE_COMPAT_IGNORE_ORIENTATION_REQUEST_WHEN_LOOP_DETECTED" overridable="true" /><compat-change description="This change id forces the packages it is applied to never have Display API sandboxing applied for a letterbox or SCM activity. The Display APIs will continue to provide DisplayArea bounds." disabled="true" id="184838306" name="NEVER_SANDBOX_DISPLAY_APIS" overridable="true" /><compat-change description="This change id forces the packages it is applied to always have Display API sandboxing applied, regardless of windowing mode. The Display APIs will always provide the app bounds." disabled="true" id="185004937" name="ALWAYS_SANDBOX_DISPLAY_APIS" overridable="true" /><compat-change description="This change id excludes the packages it is applied to from ignoreOrientationRequest behaviour that can be enabled by the device manufacturers for the com.android.server.wm.DisplayArea or for the whole display." disabled="true" id="236283604" name="OVERRIDE_RESPECT_REQUESTED_ORIENTATION" overridable="true" /><compat-change description="This change id excludes the packages it is applied to from the camera compat force rotation treatment. See com.android.server.wm.DisplayRotationCompatPolicy for context." disabled="true" id="263959004" name="OVERRIDE_CAMERA_COMPAT_DISABLE_FORCE_ROTATION" overridable="true" /><compat-change description="This change id excludes the packages it is applied to from activity refresh after camera compat force rotation treatment. See com.android.server.wm.DisplayRotationCompatPolicy for context." disabled="true" id="264304459" name="OVERRIDE_CAMERA_COMPAT_DISABLE_REFRESH" overridable="true" /><compat-change description="This change id makes the packages it is applied to do activity refresh after camera compat force rotation treatment using &quot;resumed -&gt; paused -&gt; resumed&quot; cycle rather than &quot;resumed -&gt; ... -&gt; stopped -&gt; ... -&gt; resumed&quot; cycle. See com.android.server.wm.DisplayRotationCompatPolicy for context." disabled="true" id="264301586" name="OVERRIDE_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSE" overridable="true" /><compat-change description="This change id forces the packages it is applied to sandbox {@link android.view.View} API to an activity bounds for: &lt;p&gt;{@link android.view.View#getLocationOnScreen}, {@link android.view.View#getWindowVisibleDisplayFrame}, {@link android.view.View}#getWindowDisplayFrame, {@link android.view.View}#getBoundsOnScreen. &lt;p&gt;For {@link android.view.View#getWindowVisibleDisplayFrame} and {@link android.view.View}#getWindowDisplayFrame this sandboxing is happening indirectly through {@link android.view.ViewRootImpl}#getWindowVisibleDisplayFrame, {@link android.view.ViewRootImpl}#getDisplayFrame respectively. &lt;p&gt;Some applications assume that they occupy the whole screen and therefore use the display coordinates in their calculations as if an activity is  positioned in the top-left corner of the screen, with left coordinate equal to 0. This may not be the case of applications in multi-window and in letterbox modes. This can lead to shifted or out of bounds UI elements in case the activity is Letterboxed or is in multi-window mode." disabled="true" id="237531167" name="OVERRIDE_SANDBOX_VIEW_BOUNDS_APIS" overridable="true" /><compat-change description="This change id is the gatekeeper for all treatments that force a given min aspect ratio. Enabling this change will allow the following min aspect ratio treatments to be applied: OVERRIDE_MIN_ASPECT_RATIO_MEDIUM OVERRIDE_MIN_ASPECT_RATIO_LARGE If OVERRIDE_MIN_ASPECT_RATIO is applied, the min aspect ratio given in the app's manifest will be overridden to the largest enabled aspect ratio treatment unless the app's manifest value is higher." disabled="true" id="174042980" name="OVERRIDE_MIN_ASPECT_RATIO" overridable="true" /><compat-change description="This change id restricts treatments that force a given min aspect ratio to activities whose orientation is fixed to portrait. This treatment is enabled by default and only takes effect if OVERRIDE_MIN_ASPECT_RATIO is also enabled." id="203647190" name="OVERRIDE_MIN_ASPECT_RATIO_PORTRAIT_ONLY" overridable="true" /><compat-change description="This change id sets the activity's min aspect ratio to a medium value as defined by OVERRIDE_MIN_ASPECT_RATIO_MEDIUM_VALUE. This treatment only takes effect if OVERRIDE_MIN_ASPECT_RATIO is also enabled." disabled="true" id="180326845" name="OVERRIDE_MIN_ASPECT_RATIO_MEDIUM" overridable="true" /><compat-change description="This change id sets the activity's min aspect ratio to a large value as defined by OVERRIDE_MIN_ASPECT_RATIO_LARGE_VALUE. This treatment only takes effect if OVERRIDE_MIN_ASPECT_RATIO is also enabled." disabled="true" id="180326787" name="OVERRIDE_MIN_ASPECT_RATIO_LARGE" overridable="true" /><compat-change description="Enables the use of split screen aspect ratio. This allows an app to use all the available space in split mode avoiding letterboxing." disabled="true" id="208648326" name="OVERRIDE_MIN_ASPECT_RATIO_TO_ALIGN_WITH_SPLIT_SCREEN" overridable="true" /><compat-change description="Overrides the min aspect ratio restriction in portrait fullscreen in order to use all available screen space." disabled="true" id="218959984" name="OVERRIDE_MIN_ASPECT_RATIO_EXCLUDE_PORTRAIT_FULLSCREEN" overridable="true" /><compat-change description="Enables sending fake focus for unfocused apps in splitscreen. Some game engines wait to get focus before drawing the content of the app so fake focus helps them to avoid staying blacked out when they are resumed and do not have focus yet." disabled="true" id="263259275" name="OVERRIDE_ENABLE_COMPAT_FAKE_FOCUS" overridable="true" /><compat-change description="Enables {@link #SCREEN_ORIENTATION_PORTRAIT}. Unless OVERRIDE_ANY_ORIENTATION is enabled, this override is used only when no other fixed orientation was specified by the activity." disabled="true" id="265452344" name="OVERRIDE_UNDEFINED_ORIENTATION_TO_PORTRAIT" overridable="true" /><compat-change description="Enables {@link #SCREEN_ORIENTATION_NOSENSOR}. Unless OVERRIDE_ANY_ORIENTATION is enabled, this override is used only when no other fixed orientation was specified by the activity." disabled="true" id="265451093" name="OVERRIDE_UNDEFINED_ORIENTATION_TO_NOSENSOR" overridable="true" /><compat-change description="Enables {@link #SCREEN_ORIENTATION_REVERSE_LANDSCAPE}. Unless OVERRIDE_ANY_ORIENTATION is enabled, this override is used only when activity specify landscape orientation. This can help apps that assume that landscape display orientation corresponds to {@link android.view.Surface#ROTATION_90}, while on some devices it can be {@link android.view.Surface#ROTATION_270}." disabled="true" id="266124927" name="OVERRIDE_LANDSCAPE_ORIENTATION_TO_REVERSE_LANDSCAPE" overridable="true" /><compat-change description="When enabled, allows OVERRIDE_LANDSCAPE_ORIENTATION_TO_REVERSE_LANDSCAPE, OVERRIDE_UNDEFINED_ORIENTATION_TO_NOSENSOR and OVERRIDE_UNDEFINED_ORIENTATION_TO_PORTRAIT to override any orientation requested by the activity." disabled="true" id="265464455" name="OVERRIDE_ANY_ORIENTATION" overridable="true" /><compat-change description="When enabled, activates OVERRIDE_LANDSCAPE_ORIENTATION_TO_REVERSE_LANDSCAPE, OVERRIDE_UNDEFINED_ORIENTATION_TO_NOSENSOR and OVERRIDE_UNDEFINED_ORIENTATION_TO_PORTRAIT only when an app is connected to the camera. See com.android.server.wm.DisplayRotationCompatPolicy for more context." disabled="true" id="265456536" name="OVERRIDE_ORIENTATION_ONLY_FOR_CAMERA" overridable="true" /><compat-change description="This override fixes display orientation to landscape natural orientation when a task is fullscreen. While display rotation is fixed to landscape, the orientation requested by the activity will be still respected by bounds resolution logic. For instance, if an activity requests portrait orientation and this override is set, then activity will appear in the letterbox mode for fixed orientation with the display rotated to the lanscape natural orientation. &lt;p&gt;This override is applicable only when natural orientation of the device is landscape and display ignores orientation requestes. &lt;p&gt;Main use case for this override are camera-using activities that are portrait-only and assume alignment with natural device orientation. Such activities can automatically be rotated with com.android.server.wm.DisplayRotationCompatPolicy but not all of them can handle dynamic rotation and thus can benefit from this override." disabled="true" id="255940284" name="OVERRIDE_USE_DISPLAY_LANDSCAPE_NATURAL_ORIENTATION" overridable="true" /><compat-change description="Compares activity window layout min width/height with require space for multi window to determine if it can be put into multi window mode." enableSinceTargetSdk="31" id="197654537" name="CHECK_MIN_WIDTH_HEIGHT_FOR_MULTI_WINDOW" /><compat-change description="Apps targeting Android R and above will need to declare the packages and intents they intend to use to get details about other apps on a device. Such declarations must be made via the {@code &lt;queries&gt;} tag in the manifest." enableSinceTargetSdk="30" id="135549675" name="FILTER_APPLICATION_QUERY" /><compat-change description="Missing an &quot;application&quot; or &quot;instrumentation&quot; tag." enableAfterTargetSdk="29" id="150776642" name="MISSING_APP_TAG" /><compat-change description="An intent filter's actor or category is an empty string. A bug in the platform before R allowed this to pass through without an error. This does not include cases when the attribute is null/missing, as that has always been a failure." enableAfterTargetSdk="29" id="151163173" name="EMPTY_INTENT_ACTION_CATEGORY" /><compat-change description="The {@code resources.arsc} of one of the APKs being installed is compressed or not aligned on a 4-byte boundary. Resource tables that cannot be memory mapped exert excess memory pressure on the system and drastically slow down construction of {@link android.content.res.Resources} objects." enableAfterTargetSdk="29" id="132742131" name="RESOURCES_ARSC_COMPRESSED" /><compat-change description="Missing `android:exported` flag. When an intent filter is defined, an explicit value for the android:exported flag is required." enableAfterTargetSdk="30" id="150232615" name="MISSING_EXPORTED_FLAG" /><compat-change description="Starting in {@link android.os.Build.VERSION_CODES#R}, there is a new public API overload {@link #onChange(boolean, Uri, int)} that delivers a {@code int flags} argument. &lt;p&gt; Some apps may be relying on a previous hidden API that delivered a {@code int userId} argument, and this change is used to control delivery of the new {@code int flags} argument in its place." enableAfterTargetSdk="29" id="150939131" name="ADD_CONTENT_OBSERVER_FLAGS" /><compat-change description="For apps targeting S and above, a SecurityException is thrown when they do not have HIGH_SAMPLING_RATE_SENSORS permission, run in debug mode, and request sampling rates that are faster than 200 Hz." enableAfterTargetSdk="30" id="136069189" name="CHANGE_ID_SAMPLING_RATE_SENSORS_PERMISSION" /><compat-change description="Force camera output to be rotated to portrait orientation on landscape cameras. Many apps do not handle this situation and display stretched images otherwise." enableSinceTargetSdk="1" id="250678880" name="OVERRIDE_CAMERA_LANDSCAPE_TO_PORTRAIT" overridable="true" /><compat-change description="Enable physical camera availability callbacks when the logical camera is unavailable &lt;p&gt;Previously once a logical camera becomes unavailable, no {@link AvailabilityCallback#onPhysicalCameraAvailable} or {@link AvailabilityCallback#onPhysicalCameraUnavailable} will be called until the logical camera becomes available again. The results in the app opening the logical camera not able to receive physical camera availability change.&lt;/p&gt; &lt;p&gt;With this change, the {@link AvailabilityCallback#onPhysicalCameraAvailable} and {@link AvailabilityCallback#onPhysicalCameraUnavailable} can still be called while the logical camera is unavailable.  &lt;/p&gt;" enableSinceTargetSdk="34" id="244358506" name="ENABLE_PHYSICAL_CAMERA_CALLBACK_FOR_UNAVAILABLE_LOGICAL_CAMERA" /><compat-change description="Prevent touches from being consumed by apps if these touches passed through a non-trusted window from a different UID and are considered unsafe." id="158002302" name="BLOCK_UNTRUSTED_TOUCHES" /><compat-change description="Finish the {@link InputConnection} when the device becomes {@link android.os.PowerManager#isInteractive non-interactive}. &lt;p&gt; If enabled by the current {@link InputMethodService input method}, the current input connection will be {@link InputMethodService#onFinishInput finished} whenever the devices becomes non-interactive. &lt;p&gt; If not enabled, the current input connection will instead be silently deactivated when the devices becomes non-interactive, and an {@link InputMethodService#onFinishInput onFinishInput()} {@link InputMethodService#onStartInput onStartInput()} pair is dispatched when the device becomes interactive again." enableSinceTargetSdk="31" id="156215187" name="FINISH_INPUT_NO_FALLBACK_CONNECTION" /><compat-change description="Disallow IMEs to override {@link InputMethodService#onCreateInputMethodSessionInterface()} method. &lt;p&gt;If IMEs targeting on Android U and beyond override the {@link InputMethodService#onCreateInputMethodSessionInterface()}, an {@link LinkageError} would be thrown.&lt;/p&gt;" enableSinceTargetSdk="34" id="148086656" name="DISALLOW_INPUT_METHOD_INTERFACE_OVERRIDE" /><compat-change description="For apps targeting Android S and above, immutable PendingIntents passed into location APIs will generate an IllegalArgumentException." enableAfterTargetSdk="30" id="171317480" name="BLOCK_IMMUTABLE_PENDING_INTENTS" /><compat-change description="For apps targeting Android S and above, LocationRequest system APIs may not be used with PendingIntent location requests." enableAfterTargetSdk="30" id="169887240" name="BLOCK_PENDING_INTENT_SYSTEM_API_USAGE" /><compat-change description="For apps targeting Android S and above, location clients may receive historical locations (from before the present time) under some circumstances." enableAfterTargetSdk="30" id="73144566" name="DELIVER_HISTORICAL_LOCATIONS" /><compat-change description="For apps targeting Android R and above, {@link #getProvider(String)} will no longer throw any security exceptions." enableAfterTargetSdk="29" id="150935354" name="GET_PROVIDER_SECURITY_EXCEPTIONS" /><compat-change description="For apps targeting Android K and above, supplied {@link PendingIntent}s must be targeted to a specific package." enableAfterTargetSdk="16" id="148963590" name="BLOCK_UNTARGETED_PENDING_INTENTS" /><compat-change description="For apps targeting Android K and above, incomplete locations may not be passed to {@link #setTestProviderLocation}." enableAfterTargetSdk="16" id="148964793" name="BLOCK_INCOMPLETE_LOCATIONS" /><compat-change description="For apps targeting Android S and above, all {@link GpsStatus} API usage must be replaced with {@link GnssStatus} APIs." enableAfterTargetSdk="30" id="144027538" name="BLOCK_GPS_STATUS_USAGE" /><compat-change description="For apps targeting Android S and above, all LocationRequest objects marked as low power will throw exceptions if the caller does not have the LOCATION_HARDWARE permission, instead of silently dropping the low power part of the request." enableAfterTargetSdk="30" id="168936375" name="LOW_POWER_EXCEPTIONS" /><compat-change description="This change id controls use of audio modes for call audio redirection." enableSinceTargetSdk="33" id="189472651" name="CALL_REDIRECTION_AUDIO_MODES" /><compat-change description="Controls whether DEVICE_VOLUME_BEHAVIOR_ABSOLUTE_ADJUST_ONLY may be returned by getDeviceVolumeBehavior. If this is disabled, DEVICE_VOLUME_BEHAVIOR_FULL is returned in its place." enableSinceTargetSdk="34" id="240663182" name="RETURN_DEVICE_VOLUME_BEHAVIOR_ABSOLUTE_ADJUST_ONLY" overridable="true" /><compat-change description="This change id controls the kind of video profiles returned by {@link #getAll}." enableSinceTargetSdk="33" id="206033068" name="RETURN_ADVANCED_VIDEO_PROFILES" /><compat-change description="&lt;p&gt; Flag to gate correct exception thrown by {@code #detachImage}. &lt;/p&gt; &lt;p&gt; {@code #detachImage} is documented as throwing {@link java.lang.IllegalStateException} in the event of an error; a native helper method to this threw {@link java.lang.RuntimeException} if the surface was abandoned while detaching the {@code Image}. &lt;p&gt; This previously undocumented exception behavior continues through Android T. &lt;/p&gt; &lt;p&gt; After Android T, the native helper method only throws {@code IllegalStateExceptions} in accordance with the documentation. &lt;/p&gt; &lt;p&gt; {@code #detachImage} will now throw only ISEs if it runs into errors while detaching the image. Behavior on apps targeting API levels &lt;= T remains unchanged. &lt;/p&gt;" enableAfterTargetSdk="33" id="236825255" name="DETACH_THROWS_ISE_ONLY" /><compat-change description="Requires an app registers a {@link Callback} before invoking {@link #createVirtualDisplay(String, int, int, int, int, Surface, VirtualDisplay.Callback, Handler) createVirtualDisplay}. &lt;p&gt;Enabled after version 33 (Android T), so applies to target SDK of 34+ (Android U+)." enableSinceTargetSdk="34" id="269849258" name="MEDIA_PROJECTION_REQUIRES_CALLBACK" /><compat-change description="Scoped Storage is on by default. However, it is not strictly enforced and there are multiple ways to opt out of scoped storage: &lt;ul&gt; &lt;li&gt;Target Sdk &lt; Q&lt;/li&gt; &lt;li&gt;Target Sdk = Q and has `requestLegacyExternalStorage` set in AndroidManifest.xml&lt;/li&gt; &lt;li&gt;Target Sdk &gt; Q: Upgrading from an app that was opted out of scoped storage and has `preserveLegacyExternalStorage` set in AndroidManifest.xml&lt;/li&gt; &lt;/ul&gt; This flag is enabled for all apps by default as Scoped Storage is enabled by default. Developers can disable this flag to opt out of Scoped Storage and have legacy storage workflow. Note: {@code FORCE_ENABLE_SCOPED_STORAGE} should also be disabled for apps to opt out of scoped storage. Note: This flag is also used in {@code com.android.providers.media.LocalCallingIdentity}. Any modifications to this flag should be reflected there as well. See https://developer.android.com/training/data-storage#scoped-storage for more information." id="149924527" name="DEFAULT_SCOPED_STORAGE" /><compat-change description="Setting this flag strictly enforces Scoped Storage regardless of: &lt;ul&gt; &lt;li&gt;The value of Target Sdk&lt;/li&gt; &lt;li&gt;The value of `requestLegacyExternalStorage` in AndroidManifest.xml&lt;/li&gt; &lt;li&gt;The value of `preserveLegacyExternalStorage` in AndroidManifest.xml&lt;/li&gt; &lt;/ul&gt; Note: {@code DEFAULT_SCOPED_STORAGE} should also be enabled for apps to be enforced into scoped storage. Note: This flag is also used in {@code com.android.providers.media.LocalCallingIdentity}. Any modifications to this flag should be reflected there as well. See https://developer.android.com/training/data-storage#scoped-storage for more information." disabled="true" id="132649864" name="FORCE_ENABLE_SCOPED_STORAGE" /><compat-change description="Detect explicit calls to {@link Runtime#gc()}." enableSinceTargetSdk="34" id="3400644" name="DETECT_EXPLICIT_GC" /><compat-change description="For apps targeting {@link Build.VERSION_CODES#TIRAMISU} and above, any UserManager API marked as {@link  android.annotation.UserHandleAware @UserHandleAware} will use the context user (rather than the calling user). For apps targeting an SDK version &lt;em&gt;below&lt;/em&gt; this, the behaviour depends on the particular method and when it was first introduced: &lt;ul&gt;     &lt;li&gt;         if the {@literal @}UserHandleAware specifies a         {@link  android.annotation.UserHandleAware#enabledSinceTargetSdkVersion} of         {@link Build.VERSION_CODES#TIRAMISU} the &lt;em&gt;calling&lt;/em&gt; user is used.     &lt;/li&gt;     &lt;li&gt;         if the {@literal @}UserHandleAware doesn't specify a         {@link  android.annotation.UserHandleAware#enabledSinceTargetSdkVersion}, the         &lt;em&gt;context&lt;/em&gt; user is used.     &lt;/li&gt;     &lt;li&gt;there should currently be no other values used by UserManager for         {@link  android.annotation.UserHandleAware#enabledSinceTargetSdkVersion}, since all         old implicitly user-dependant APIs were updated in that version and anything         introduced more recently should already be {@literal @}UserHandleAware.     &lt;/li&gt; &lt;/ul&gt; Note that when an API marked with {@link  android.annotation.UserHandleAware#enabledSinceTargetSdkVersion} is run on a device whose OS predates that version, the calling user will be used, since on such a device, the API is not {@literal @}UserHandleAware yet." enableSinceTargetSdk="33" id="183155436" name="ALWAYS_USE_CONTEXT_USER" /><compat-change description="A ChangeId indicating that this device supports camera and mic indicators. Will be &quot;false&quot; if present, because the CompatChanges#isChangeEnabled method returns true if the change id is not present." disabled="true" id="162547999" name="CAMERA_MIC_INDICATORS_NOT_PRESENT" /><compat-change description="Refuse to install package if groups of permissions are bad - Permission groups should only be shared between apps sharing a certificate - If a permission belongs to a group that group should be defined" enableAfterTargetSdk="31" id="146211400" name="CANNOT_INSTALL_WITH_BAD_PERMISSION_GROUPS" /><compat-change description="Compat framework change ID for the APN db read permission change. In API level 30 and beyond, accessing the APN database will require the {@link android.Manifest.permission#WRITE_APN_SETTINGS} permission. This change ID tracks apps that are affected because they don't hold this permission." enableAfterTargetSdk="29" id="124107808" name="APN_READING_PERMISSION_CHANGE_ID" /><compat-change description="Keystore operation creation may fail Keystore used to work under the assumption that the creation of cryptographic operations always succeeds. However, the KeyMint backend has only a limited number of operation slots. In order to keep up the appearance of &quot;infinite&quot; operation slots, the Keystore daemon would prune least recently used operations if there is no available operation slot. As a result, good operations could be terminated prematurely. This opens AndroidKeystore up to denial-of-service and unintended livelock situations. E.g.: if multiple apps wake up at the same time, e.g., due to power management optimizations, and attempt to perform crypto operations, they start terminating each others operations without making any progress. To break out of livelocks and to discourage DoS attempts we have changed the pruning strategy such that it prefers clients that use few operation slots and only briefly. As a result we can, almost, guarantee that single operations that don't linger inactive for more than 5 seconds will conclude unhampered by the pruning strategy. &quot;Almost&quot;, because there are operations related to file system encryption that can prune even these operations, but those are extremely rare. As a side effect of this new pruning strategy operation creation can now fail if the client has a lower pruning power than all of the existing operations. Pruning strategy To find a suitable candidate we compute the malus for the caller and each existing operation. The malus is the inverse of the pruning power (caller) or pruning resistance (existing operation). For the caller to be able to prune an operation it must find an operation with a malus higher than its own. For more detail on the pruning strategy consult the implementation at https://android.googlesource.com/platform/system/security/+/refs/heads/master/keystore2/src/operation.rs For older SDK version, KeyStore2 will poll the Keystore daemon for a free operation slot. So to applications, targeting earlier SDK versions, it will still look like cipher and signature object initialization always succeeds, however, it may take longer to get an operation. All SDK version benefit from fairer operation slot scheduling and a better chance to successfully conclude an operation." disabled="true" id="169897160" name="KEYSTORE_OPERATION_CREATION_MAY_FAIL" /><compat-change description="The method {@link TileService#startActivityAndCollapse(Intent)} will verify that only apps targeting {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} or higher will not be allowed to use it." enableSinceTargetSdk="34" id="241766793" name="START_ACTIVITY_NEEDS_PENDING_INTENT" /><compat-change description="Gates returning {@code IllegalStateException} in {@link #initialize( PersistableBundle, SharedMemory, SoundTrigger.ModuleProperties)} when no DSP module is available. If the change is not enabled, the existing behavior of not throwing an exception and delivering {@link STATE_HARDWARE_UNAVAILABLE} is retained." enableSinceTargetSdk="34" id="269165460" name="THROW_ON_INITIALIZE_IF_NO_DSP" /><compat-change description="Gates returning {@link Callback#onFailure} and {@link Callback#onUnknownFailure} when asynchronous exceptions are propagated to the client. If the change is not enabled, the existing behavior of delivering {@link #STATE_ERROR} is retained." enableSinceTargetSdk="34" id="280471513" name="SEND_ON_FAILURE_FOR_ASYNC_EXCEPTIONS" /><compat-change description="For apps targeting Build.VERSION_CODES.UPSIDE_DOWN_CAKE and above, implementors of this service can create multiple AlwaysOnHotwordDetector instances in parallel. They will also e ale to create a single SoftwareHotwordDetector in parallel with any other active AlwaysOnHotwordDetector instances. &lt;p&gt;Requirements when this change is enabled: &lt;ul&gt;     &lt;li&gt;         Any number of AlwaysOnHotwordDetector instances can be created in parallel         as long as they are unique to any other active AlwaysOnHotwordDetector.     &lt;/li&gt;     &lt;li&gt;         Only a single instance of SoftwareHotwordDetector can be active at a given         time. It can be active at the same time as any number of         AlwaysOnHotwordDetector instances.     &lt;/li&gt;     &lt;li&gt;         To release that reference and any resources associated with that reference,         HotwordDetector#destroy() must be called. An attempt to create an         HotwordDetector equal to an active HotwordDetector will be rejected         until HotwordDetector#destroy() is called on the active instance.     &lt;/li&gt; &lt;/ul&gt;" enableSinceTargetSdk="34" id="193232191" name="MULTIPLE_ACTIVE_HOTWORD_DETECTORS" /><compat-change description="Enable READ_PHONE_STATE protection on APIs querying and notifying call state, such as {@code TelecomManager#getCallState}, {@link TelephonyManager#getCallStateForSubscription()}, and {@link android.telephony.TelephonyCallback.CallStateListener}." enableSinceTargetSdk="31" id="157233955" name="ENABLE_GET_CALL_STATE_PERMISSION_PROTECTION" /><compat-change description="Enable READ_PHONE_NUMBERS or READ_PRIVILEGED_PHONE_STATE protections on {@link TelecomManager#getPhoneAccount(PhoneAccountHandle)}." enableSinceTargetSdk="31" id="183407956" name="ENABLE_GET_PHONE_ACCOUNT_PERMISSION_PROTECTION" /><compat-change description="A new registration state, REGISTRATION_STATE_EMERGENCY, is added to {@link NetworkRegistrationInfo}. This change will affect the result of getRegistration()." enableSinceTargetSdk="34" id="255938466" name="RETURN_REGISTRATION_STATE_EMERGENCY" /><compat-change description="Used for checking if the SDK version for {@code PreciseDataConnectionState#getDataConnectionState} is above Q." enableAfterTargetSdk="29" id="148535736" name="GET_DATA_CONNECTION_STATE_R_VERSION" /><compat-change description="To check the SDK version for SmsManager.sendResolverResult method." enableAfterTargetSdk="28" id="145147528" name="GET_TARGET_SDK_VERSION_CODE_CHANGE" /><compat-change description="This change enables a limit on the number of {@link TelephonyCallback} objects any process may register via {@link TelephonyManager#registerTelephonyCallback}. The default limit is 50, which may change via remote device config updates. This limit is enforced via an {@link IllegalStateException} thrown from {@link TelephonyManager#registerTelephonyCallback} when the offending process attempts to register one too many callbacks." id="150880553" name="PHONE_STATE_LISTENER_LIMIT_CHANGE_ID" /><compat-change description="To expand the error codes for {@link TelephonyManager#updateAvailableNetworks} and {@link TelephonyManager#setPreferredOpportunisticDataSubscription}." enableAfterTargetSdk="29" id="130595455" name="CALLBACK_ON_MORE_ERROR_CODE_CHANGE" /><compat-change description="Used for checking if the SDK version for {@link TelephonyManager#getDataState} is above Q." enableAfterTargetSdk="29" id="148534348" name="GET_DATA_STATE_R_VERSION" /><compat-change description="Used for checking if the target SDK version for the current process is S or above. &lt;p&gt; Applies to the following methods: {@link #requestCellInfoUpdate}, {@link #setPreferredOpportunisticDataSubscription}, {@link #updateAvailableNetworks}, requestNumberVerification(), setSimPowerStateForSlot()," enableAfterTargetSdk="30" id="182185642" name="NULL_TELEPHONY_THROW_NO_CB" /><compat-change description="To check the SDK version for {@link #listenFromListener}." enableAfterTargetSdk="28" id="147600208" name="LISTEN_CODE_CHANGE" /><compat-change description="Apps targeting on Android T and beyond will get exception whenever switchToSubscription without portIndex is called for disable subscription." enableSinceTargetSdk="33" id="218393363" name="SWITCH_WITHOUT_PORT_INDEX_EXCEPTION_ON_DISABLE" /><compat-change description="With support for MEP(multiple enabled profile) in Android T, a SIM card can enable multiple profile on different port. If apps are not target SDK T yet and keep calling the switchToSubscription or download API without specifying the port index, we should keep the existing behaviour by always use port index 0 even the device itself has MEP eUICC, this is for carrier app's backward compatibility." enableSinceTargetSdk="33" id="224562872" name="SHOULD_RESOLVE_PORT_INDEX_FOR_APPS" /><compat-change description="Starting with Android U, a port is available if it is active without an enabled profile on it or calling app can activate a new profile on the selected port without any user interaction." enableSinceTargetSdk="34" id="240273417" name="INACTIVE_PORT_AVAILABILITY_CHECK" /><compat-change description="{@link #getBestDateTimePattern(Locale, String)} does not allow non-consecutive repeated symbol in the skeleton. For example, please use a skeleton of {@code &quot;jmm&quot;} or {@code &quot;hmma&quot;} instead of {@code &quot;ahmma&quot;} or {@code &quot;jmma&quot;}, because the field 'j' could mean using 12-hour in some locales and, in this case, is duplicated as the 'a' field." enableSinceTargetSdk="34" id="170233598" name="DISALLOW_DUPLICATE_FIELD_IN_SKELETON" /><compat-change description="After {@link UPSIDE_DOWN_CAKE}, {@link #notifyViewsDisappeared(AutofillId, long[])} wraps the virtual children with a pair of view tree appearing and view tree appeared events." enableSinceTargetSdk="34" id="258825825" name="NOTIFY_NODES_DISAPPEAR_NOW_SENDS_TREE_EVENTS" /><compat-change description="The {@link InlineSuggestionsRequest#getSupportedLocales()} now returns empty locale list when it's not set, instead of the default system locale." enableSinceTargetSdk="31" id="169273070" name="IME_AUTOFILL_DEFAULT_SUPPORTED_LOCALES_IS_EMPTY" /><compat-change description="Clear {@link #SHOW_FORCED} flag when the next IME focused application changed. &lt;p&gt; Note that when this flag enabled in server side, {@link #SHOW_FORCED} will no longer affect the next focused application to keep showing IME, in case of unexpected IME visible when the next focused app isn't be the IME requester. &lt;/p&gt;" enableSinceTargetSdk="33" id="214016041" name="CLEAR_SHOW_FORCED_FLAG_WHEN_LEAVING" /><compat-change description="Enable web content to apply light or dark style according to the app's theme and WebView to attempt to darken web content by algorithmic darkening when appropriate. Refer to {@link #setAlgorithmicDarkeningAllowed} for detail." enableSinceTargetSdk="33" id="214741472" name="ENABLE_SIMPLIFIED_DARK_MODE" /><compat-change description="This sets the edge effect to use stretch instead of glow." enableSinceTargetSdk="1" id="171228096" name="USE_STRETCH_EDGE_EFFECT_BY_DEFAULT" /><compat-change description="On Android S and above, the platform can provide non-text suggestions (e.g. images) via the augmented autofill framework (see &lt;a href=&quot;/guide/topics/text/autofill-services&quot;&gt;autofill services&lt;/a&gt;). In order for an app to be able to handle these suggestions, it must normally implement the {@link android.view.OnReceiveContentListener} API. To make the adoption of this smoother for apps that have previously implemented the {@link android.view.inputmethod.InputConnection#commitContent(InputContentInfo, int, Bundle)} API, we reuse that API as a fallback if {@link android.view.OnReceiveContentListener} is not yet implemented by the app. This fallback is only enabled on Android S. This change ID disables the fallback, such that apps targeting Android T and above must implement the {@link android.view.OnReceiveContentListener} API in order to accept non-text suggestions." enableAfterTargetSdk="31" id="163400105" name="AUTOFILL_NON_TEXT_REQUIRES_ON_RECEIVE_CONTENT_LISTENER" /><compat-change description="This change ID enables the fallback text line spacing (line height) for BoringLayout." enableSinceTargetSdk="33" id="210923482" name="BORINGLAYOUT_FALLBACK_LINESPACING" /><compat-change description="This change ID enables the fallback text line spacing (line height) for StaticLayout." enableSinceTargetSdk="28" id="37756858" name="STATICLAYOUT_FALLBACK_LINESPACING" /><compat-change description="Text toasts will be rendered by SystemUI instead of in-app, so apps can't circumvent background custom toast restrictions." enableAfterTargetSdk="29" id="147798919" name="CHANGE_TEXT_TOASTS_IN_THE_SYSTEM" /><compat-change description="This change targets zip path traversal vulnerabilities by throwing {@link java.util.zip.ZipException} if zip path entries contain &quot;..&quot; or start with &quot;/&quot;. &lt;p&gt; The exception will be thrown in {@link java.util.zip.ZipInputStream#getNextEntry} or {@link java.util.zip.ZipFile#ZipFile(String)}. &lt;p&gt; This validation is enabled for apps with targetSDK &gt;= U." enableSinceTargetSdk="34" id="242716250" name="VALIDATE_ZIP_PATH_FOR_PATH_TRAVERSAL" /><compat-change description="Native heap allocations will now have a non-zero tag in the most significant byte. @see &lt;a href=&quot;https://source.android.com/devices/tech/debug/tagged-pointers&quot;&gt;Tagged     Pointers&lt;/a&gt;" enableAfterTargetSdk="29" id="135754954" name="NATIVE_HEAP_POINTER_TAGGING" /><compat-change description="Native heap allocations in AppZygote process and its descendants will now have a non-zero tag in the most significant byte. @see &lt;a href=&quot;https://source.android.com/devices/tech/debug/tagged-pointers&quot;&gt;Tagged     Pointers&lt;/a&gt;" enableAfterTargetSdk="31" id="207557677" name="NATIVE_HEAP_POINTER_TAGGING_SECONDARY_ZYGOTE" /><compat-change description="Enable asynchronous (ASYNC) memory tag checking in this process. This flag will only have an effect on hardware supporting the ARM Memory Tagging Extension (MTE)." disabled="true" id="135772972" name="NATIVE_MEMTAG_ASYNC" /><compat-change description="Enable synchronous (SYNC) memory tag checking in this process. This flag will only have an effect on hardware supporting the ARM Memory Tagging Extension (MTE). If both NATIVE_MEMTAG_ASYNC and this option is selected, this option takes preference and MTE is enabled in SYNC mode." disabled="true" id="177438394" name="NATIVE_MEMTAG_SYNC" /><compat-change description="Enable automatic zero-initialization of native heap memory allocations." disabled="true" id="178038272" name="NATIVE_HEAP_ZERO_INIT" /><compat-change description="Enable sampled memory bug detection in the app. @see &lt;a href=&quot;https://source.android.com/devices/tech/debug/gwp-asan&quot;&gt;GWP-ASan&lt;/a&gt;." disabled="true" id="135634846" name="GWP_ASAN" /></config>